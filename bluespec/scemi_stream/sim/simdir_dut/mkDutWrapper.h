/*
 * Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
 * 
 * On Wed Apr 17 15:19:32 EDT 2013
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkDutWrapper_h__
#define __mkDutWrapper_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkMemory.h"
#include "mkRSAModMultIlvd.h"


/* Class declaration for the mkDutWrapper module */
class MOD_mkDutWrapper : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_mkMemory INST_rsa_memory;
  MOD_mkRSAModMultIlvd INST_rsa_modmult;
  MOD_Reg<tUInt8> INST_rsa_state;
 
 /* Constructor */
 public:
  MOD_mkDutWrapper(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_memInit_request_put;
  tUInt8 PORT_EN_get_result_get;
  tUInt64 PORT_memInit_request_put;
  tUInt8 PORT_RDY_memInit_request_put;
  tUInt8 PORT_memInit_done;
  tUInt8 PORT_RDY_memInit_done;
  tUInt32 PORT_get_result_get;
  tUInt8 PORT_RDY_get_result_get;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_get_result_get;
  tUInt8 DEF_WILL_FIRE_memInit_request_put;
  tUInt8 DEF_WILL_FIRE_RL_rsa_doSomething;
  tUInt8 DEF_CAN_FIRE_RL_rsa_doSomething;
  tUInt8 DEF_CAN_FIRE_get_result_get;
  tUInt8 DEF_CAN_FIRE_memInit_done;
  tUInt8 DEF_CAN_FIRE_memInit_request_put;
  tUInt8 DEF_rsa_memory_init_done____d11;
 
 /* Local definitions */
 private:
 
 /* Rules */
 public:
  void RL_rsa_doSomething();
 
 /* Methods */
 public:
  void METH_memInit_request_put(tUInt64 ARG_memInit_request_put);
  tUInt8 METH_RDY_memInit_request_put();
  tUInt8 METH_memInit_done();
  tUInt8 METH_RDY_memInit_done();
  tUInt32 METH_get_result_get();
  tUInt8 METH_RDY_get_result_get();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDutWrapper &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkDutWrapper &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkDutWrapper &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkDutWrapper &backing);
};

#endif /* ifndef __mkDutWrapper_h__ */
