/*
 * Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
 * 
 * On Wed Apr 17 15:19:32 EDT 2013
 * 
 */
#include "bluesim_primitives.h"
#include "mkDutWrapper.h"


/* String declarations */
static std::string const __str_literal_1("%x", 2u);
static std::string const __str_literal_2("done", 4u);


/* Constructor */
MOD_mkDutWrapper::MOD_mkDutWrapper(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_rsa_memory(simHdl, "rsa_memory", this),
    INST_rsa_modmult(simHdl, "rsa_modmult", this),
    INST_rsa_state(simHdl, "rsa_state", this, 8u, (tUInt8)1u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_memInit_request_put = false;
  PORT_EN_get_result_get = false;
  PORT_memInit_request_put = 0llu;
  PORT_RDY_memInit_request_put = false;
  PORT_memInit_done = false;
  PORT_RDY_memInit_done = false;
  PORT_get_result_get = 0u;
  PORT_RDY_get_result_get = false;
  symbol_count = 19u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkDutWrapper::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_get_result_get", SYM_DEF, &DEF_CAN_FIRE_get_result_get, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_memInit_done", SYM_DEF, &DEF_CAN_FIRE_memInit_done, 1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_memInit_request_put",
	      SYM_DEF,
	      &DEF_CAN_FIRE_memInit_request_put,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_RL_rsa_doSomething",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_rsa_doSomething,
	      1u);
  init_symbol(&symbols[4u], "EN_get_result_get", SYM_PORT, &PORT_EN_get_result_get, 1u);
  init_symbol(&symbols[5u], "EN_memInit_request_put", SYM_PORT, &PORT_EN_memInit_request_put, 1u);
  init_symbol(&symbols[6u], "get_result_get", SYM_PORT, &PORT_get_result_get, 16u);
  init_symbol(&symbols[7u], "memInit_done", SYM_PORT, &PORT_memInit_done, 1u);
  init_symbol(&symbols[8u], "memInit_request_put", SYM_PORT, &PORT_memInit_request_put, 33u);
  init_symbol(&symbols[9u], "RDY_get_result_get", SYM_PORT, &PORT_RDY_get_result_get, 1u);
  init_symbol(&symbols[10u], "RDY_memInit_done", SYM_PORT, &PORT_RDY_memInit_done, 1u);
  init_symbol(&symbols[11u], "RDY_memInit_request_put", SYM_PORT, &PORT_RDY_memInit_request_put, 1u);
  init_symbol(&symbols[12u], "RL_rsa_doSomething", SYM_RULE);
  init_symbol(&symbols[13u], "rsa_memory", SYM_MODULE, &INST_rsa_memory);
  init_symbol(&symbols[14u], "rsa_modmult", SYM_MODULE, &INST_rsa_modmult);
  init_symbol(&symbols[15u], "rsa_state", SYM_MODULE, &INST_rsa_state);
  init_symbol(&symbols[16u], "WILL_FIRE_get_result_get", SYM_DEF, &DEF_WILL_FIRE_get_result_get, 1u);
  init_symbol(&symbols[17u],
	      "WILL_FIRE_memInit_request_put",
	      SYM_DEF,
	      &DEF_WILL_FIRE_memInit_request_put,
	      1u);
  init_symbol(&symbols[18u],
	      "WILL_FIRE_RL_rsa_doSomething",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_rsa_doSomething,
	      1u);
}


/* Rule actions */

void MOD_mkDutWrapper::RL_rsa_doSomething()
{
  tUInt8 DEF_b__h265;
  tUInt8 DEF_signed_rsa_state___d5;
  DEF_b__h265 = INST_rsa_state.METH_read();
  DEF_signed_rsa_state___d5 = DEF_b__h265;
  INST_rsa_memory.METH_request_put(65536llu);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_fwrite(sim_hdl, this, "32,s,-8", 2147483649u, &__str_literal_1, DEF_signed_rsa_state___d5);
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
  }
}


/* Methods */

void MOD_mkDutWrapper::METH_memInit_request_put(tUInt64 ARG_memInit_request_put)
{
  tUInt64 DEF_memInit_request_put_BIT_32_CONCAT_IF_memInit_r_ETC___d9;
  tUInt8 DEF_memInit_request_put_BIT_32___d10;
  tUInt32 DEF_memInit_request_put_BITS_31_TO_0___d12;
  PORT_EN_memInit_request_put = (tUInt8)1u;
  DEF_WILL_FIRE_memInit_request_put = (tUInt8)1u;
  PORT_memInit_request_put = ARG_memInit_request_put;
  DEF_memInit_request_put_BITS_31_TO_0___d12 = (tUInt32)(ARG_memInit_request_put);
  DEF_memInit_request_put_BIT_32___d10 = (tUInt8)(ARG_memInit_request_put >> 32u);
  DEF_memInit_request_put_BIT_32_CONCAT_IF_memInit_r_ETC___d9 = 8589934591llu & ((((tUInt64)(DEF_memInit_request_put_BIT_32___d10)) << 32u) | (tUInt64)(DEF_memInit_request_put_BIT_32___d10 ? DEF_memInit_request_put_BITS_31_TO_0___d12 : DEF_memInit_request_put_BITS_31_TO_0___d12));
  INST_rsa_memory.METH_init_request_put(DEF_memInit_request_put_BIT_32_CONCAT_IF_memInit_r_ETC___d9);
}

tUInt8 MOD_mkDutWrapper::METH_RDY_memInit_request_put()
{
  DEF_CAN_FIRE_memInit_request_put = INST_rsa_memory.METH_RDY_init_request_put();
  PORT_RDY_memInit_request_put = DEF_CAN_FIRE_memInit_request_put;
  return PORT_RDY_memInit_request_put;
}

tUInt8 MOD_mkDutWrapper::METH_memInit_done()
{
  DEF_rsa_memory_init_done____d11 = INST_rsa_memory.METH_init_done();
  PORT_memInit_done = DEF_rsa_memory_init_done____d11;
  return PORT_memInit_done;
}

tUInt8 MOD_mkDutWrapper::METH_RDY_memInit_done()
{
  DEF_CAN_FIRE_memInit_done = (tUInt8)1u;
  PORT_RDY_memInit_done = DEF_CAN_FIRE_memInit_done;
  return PORT_RDY_memInit_done;
}

tUInt32 MOD_mkDutWrapper::METH_get_result_get()
{
  PORT_EN_get_result_get = (tUInt8)1u;
  DEF_WILL_FIRE_get_result_get = (tUInt8)1u;
  tUInt32 DEF_AVMeth_rsa_memory_response_get;
  DEF_AVMeth_rsa_memory_response_get = INST_rsa_memory.METH_response_get();
  PORT_get_result_get = DEF_AVMeth_rsa_memory_response_get;
  return PORT_get_result_get;
}

tUInt8 MOD_mkDutWrapper::METH_RDY_get_result_get()
{
  DEF_CAN_FIRE_get_result_get = INST_rsa_memory.METH_RDY_response_get();
  PORT_RDY_get_result_get = DEF_CAN_FIRE_get_result_get;
  return PORT_RDY_get_result_get;
}


/* Reset routines */

void MOD_mkDutWrapper::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_rsa_state.reset_RST(ARG_rst_in);
  INST_rsa_modmult.reset_RST_N(ARG_rst_in);
  INST_rsa_memory.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkDutWrapper::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkDutWrapper::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_rsa_memory.dump_state(indent + 2u);
  INST_rsa_modmult.dump_state(indent + 2u);
  INST_rsa_state.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkDutWrapper::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 18u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_rsa_doSomething", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_get_result_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_memInit_done", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_memInit_request_put", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_rsa_doSomething", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_get_result_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_memInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rsa_memory_init_done____d11", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_get_result_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_memInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_get_result_get", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_memInit_done", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_memInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "get_result_get", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "memInit_done", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "memInit_request_put", 33u);
  num = INST_rsa_state.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_rsa_memory.dump_VCD_defs(l);
    num = INST_rsa_modmult.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkDutWrapper::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDutWrapper &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkDutWrapper::vcd_defs(tVCDDumpType dt, MOD_mkDutWrapper &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 33u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_rsa_doSomething) != DEF_CAN_FIRE_RL_rsa_doSomething)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_rsa_doSomething, 1u);
	backing.DEF_CAN_FIRE_RL_rsa_doSomething = DEF_CAN_FIRE_RL_rsa_doSomething;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_get_result_get) != DEF_CAN_FIRE_get_result_get)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_get_result_get, 1u);
	backing.DEF_CAN_FIRE_get_result_get = DEF_CAN_FIRE_get_result_get;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_memInit_done) != DEF_CAN_FIRE_memInit_done)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_memInit_done, 1u);
	backing.DEF_CAN_FIRE_memInit_done = DEF_CAN_FIRE_memInit_done;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_memInit_request_put) != DEF_CAN_FIRE_memInit_request_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_memInit_request_put, 1u);
	backing.DEF_CAN_FIRE_memInit_request_put = DEF_CAN_FIRE_memInit_request_put;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_rsa_doSomething) != DEF_WILL_FIRE_RL_rsa_doSomething)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_rsa_doSomething, 1u);
	backing.DEF_WILL_FIRE_RL_rsa_doSomething = DEF_WILL_FIRE_RL_rsa_doSomething;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_get_result_get) != DEF_WILL_FIRE_get_result_get)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_get_result_get, 1u);
	backing.DEF_WILL_FIRE_get_result_get = DEF_WILL_FIRE_get_result_get;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_memInit_request_put) != DEF_WILL_FIRE_memInit_request_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_memInit_request_put, 1u);
	backing.DEF_WILL_FIRE_memInit_request_put = DEF_WILL_FIRE_memInit_request_put;
      }
      ++num;
      if ((backing.DEF_rsa_memory_init_done____d11) != DEF_rsa_memory_init_done____d11)
      {
	vcd_write_val(sim_hdl, num, DEF_rsa_memory_init_done____d11, 1u);
	backing.DEF_rsa_memory_init_done____d11 = DEF_rsa_memory_init_done____d11;
      }
      ++num;
      if ((backing.PORT_EN_get_result_get) != PORT_EN_get_result_get)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_get_result_get, 1u);
	backing.PORT_EN_get_result_get = PORT_EN_get_result_get;
      }
      ++num;
      if ((backing.PORT_EN_memInit_request_put) != PORT_EN_memInit_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_memInit_request_put, 1u);
	backing.PORT_EN_memInit_request_put = PORT_EN_memInit_request_put;
      }
      ++num;
      if ((backing.PORT_RDY_get_result_get) != PORT_RDY_get_result_get)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_get_result_get, 1u);
	backing.PORT_RDY_get_result_get = PORT_RDY_get_result_get;
      }
      ++num;
      if ((backing.PORT_RDY_memInit_done) != PORT_RDY_memInit_done)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_memInit_done, 1u);
	backing.PORT_RDY_memInit_done = PORT_RDY_memInit_done;
      }
      ++num;
      if ((backing.PORT_RDY_memInit_request_put) != PORT_RDY_memInit_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_memInit_request_put, 1u);
	backing.PORT_RDY_memInit_request_put = PORT_RDY_memInit_request_put;
      }
      ++num;
      if ((backing.PORT_get_result_get) != PORT_get_result_get)
      {
	vcd_write_val(sim_hdl, num, PORT_get_result_get, 16u);
	backing.PORT_get_result_get = PORT_get_result_get;
      }
      ++num;
      if ((backing.PORT_memInit_done) != PORT_memInit_done)
      {
	vcd_write_val(sim_hdl, num, PORT_memInit_done, 1u);
	backing.PORT_memInit_done = PORT_memInit_done;
      }
      ++num;
      if ((backing.PORT_memInit_request_put) != PORT_memInit_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_memInit_request_put, 33u);
	backing.PORT_memInit_request_put = PORT_memInit_request_put;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_rsa_doSomething, 1u);
      backing.DEF_CAN_FIRE_RL_rsa_doSomething = DEF_CAN_FIRE_RL_rsa_doSomething;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_get_result_get, 1u);
      backing.DEF_CAN_FIRE_get_result_get = DEF_CAN_FIRE_get_result_get;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_memInit_done, 1u);
      backing.DEF_CAN_FIRE_memInit_done = DEF_CAN_FIRE_memInit_done;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_memInit_request_put, 1u);
      backing.DEF_CAN_FIRE_memInit_request_put = DEF_CAN_FIRE_memInit_request_put;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_rsa_doSomething, 1u);
      backing.DEF_WILL_FIRE_RL_rsa_doSomething = DEF_WILL_FIRE_RL_rsa_doSomething;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_get_result_get, 1u);
      backing.DEF_WILL_FIRE_get_result_get = DEF_WILL_FIRE_get_result_get;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_memInit_request_put, 1u);
      backing.DEF_WILL_FIRE_memInit_request_put = DEF_WILL_FIRE_memInit_request_put;
      vcd_write_val(sim_hdl, num++, DEF_rsa_memory_init_done____d11, 1u);
      backing.DEF_rsa_memory_init_done____d11 = DEF_rsa_memory_init_done____d11;
      vcd_write_val(sim_hdl, num++, PORT_EN_get_result_get, 1u);
      backing.PORT_EN_get_result_get = PORT_EN_get_result_get;
      vcd_write_val(sim_hdl, num++, PORT_EN_memInit_request_put, 1u);
      backing.PORT_EN_memInit_request_put = PORT_EN_memInit_request_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_get_result_get, 1u);
      backing.PORT_RDY_get_result_get = PORT_RDY_get_result_get;
      vcd_write_val(sim_hdl, num++, PORT_RDY_memInit_done, 1u);
      backing.PORT_RDY_memInit_done = PORT_RDY_memInit_done;
      vcd_write_val(sim_hdl, num++, PORT_RDY_memInit_request_put, 1u);
      backing.PORT_RDY_memInit_request_put = PORT_RDY_memInit_request_put;
      vcd_write_val(sim_hdl, num++, PORT_get_result_get, 16u);
      backing.PORT_get_result_get = PORT_get_result_get;
      vcd_write_val(sim_hdl, num++, PORT_memInit_done, 1u);
      backing.PORT_memInit_done = PORT_memInit_done;
      vcd_write_val(sim_hdl, num++, PORT_memInit_request_put, 33u);
      backing.PORT_memInit_request_put = PORT_memInit_request_put;
    }
}

void MOD_mkDutWrapper::vcd_prims(tVCDDumpType dt, MOD_mkDutWrapper &backing)
{
  INST_rsa_state.dump_VCD(dt, backing.INST_rsa_state);
}

void MOD_mkDutWrapper::vcd_submodules(tVCDDumpType dt,
				      unsigned int levels,
				      MOD_mkDutWrapper &backing)
{
  INST_rsa_memory.dump_VCD(dt, levels, backing.INST_rsa_memory);
  INST_rsa_modmult.dump_VCD(dt, levels, backing.INST_rsa_modmult);
}
