/*
 * Generated by Bluespec Compiler, version 2012.10.beta2 (build 29674, 2012-10.10)
 * 
 * On Wed Apr 17 15:19:32 EDT 2013
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkMemory_h__
#define __mkMemory_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkMemory module */
class MOD_mkMemory : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_BRAM<tUInt32,tUInt32,tUInt8> INST_bram_memory;
  MOD_Reg<tUInt8> INST_bram_serverAdapter_cnt;
  MOD_Wire<tUInt8> INST_bram_serverAdapter_cnt_1;
  MOD_Wire<tUInt8> INST_bram_serverAdapter_cnt_2;
  MOD_Wire<tUInt8> INST_bram_serverAdapter_cnt_3;
  MOD_Fifo<tUInt32> INST_bram_serverAdapter_outDataCore;
  MOD_Wire<tUInt8> INST_bram_serverAdapter_outData_deqCalled;
  MOD_Wire<tUInt32> INST_bram_serverAdapter_outData_enqData;
  MOD_Wire<tUInt32> INST_bram_serverAdapter_outData_outData;
  MOD_Reg<tUInt8> INST_bram_serverAdapter_s1;
  MOD_Wire<tUInt8> INST_bram_serverAdapter_s1_1;
  MOD_Wire<tUInt8> INST_bram_serverAdapter_writeWithResp;
  MOD_Reg<tUInt8> INST_memInit_initialized;
 
 /* Constructor */
 public:
  MOD_mkMemory(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_response_get;
  tUInt8 PORT_EN_request_put;
  tUInt8 PORT_EN_init_request_put;
  tUInt64 PORT_request_put;
  tUInt64 PORT_init_request_put;
  tUInt32 PORT_response_get;
  tUInt8 PORT_RDY_request_put;
  tUInt8 PORT_RDY_response_get;
  tUInt8 PORT_RDY_init_request_put;
  tUInt8 PORT_init_done;
  tUInt8 PORT_RDY_init_done;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_response_get;
  tUInt8 DEF_WILL_FIRE_request_put;
  tUInt8 DEF_CAN_FIRE_response_get;
  tUInt8 DEF_CAN_FIRE_request_put;
  tUInt8 DEF_WILL_FIRE_init_request_put;
  tUInt8 DEF_WILL_FIRE_RL_bram_serverAdapter_overRun;
  tUInt8 DEF_CAN_FIRE_RL_bram_serverAdapter_overRun;
  tUInt8 DEF_WILL_FIRE_RL_bram_serverAdapter_moveToOutFIFO;
  tUInt8 DEF_CAN_FIRE_RL_bram_serverAdapter_moveToOutFIFO;
  tUInt8 DEF_WILL_FIRE_RL_bram_serverAdapter_stageReadResponseAlways;
  tUInt8 DEF_CAN_FIRE_RL_bram_serverAdapter_stageReadResponseAlways;
  tUInt8 DEF_WILL_FIRE_RL_bram_serverAdapter_s1__dreg_update;
  tUInt8 DEF_CAN_FIRE_RL_bram_serverAdapter_s1__dreg_update;
  tUInt8 DEF_WILL_FIRE_RL_bram_serverAdapter_cnt_finalAdd;
  tUInt8 DEF_CAN_FIRE_RL_bram_serverAdapter_cnt_finalAdd;
  tUInt8 DEF_WILL_FIRE_RL_bram_serverAdapter_outData_enqAndDeq;
  tUInt8 DEF_CAN_FIRE_RL_bram_serverAdapter_outData_enqAndDeq;
  tUInt8 DEF_WILL_FIRE_RL_bram_serverAdapter_outData_deqOnly;
  tUInt8 DEF_CAN_FIRE_RL_bram_serverAdapter_outData_deqOnly;
  tUInt8 DEF_WILL_FIRE_RL_bram_serverAdapter_outData_enqOnly;
  tUInt8 DEF_CAN_FIRE_RL_bram_serverAdapter_outData_enqOnly;
  tUInt8 DEF_WILL_FIRE_RL_bram_serverAdapter_outData_setFirstEnq;
  tUInt8 DEF_CAN_FIRE_RL_bram_serverAdapter_outData_setFirstEnq;
  tUInt8 DEF_WILL_FIRE_RL_bram_serverAdapter_outData_setFirstCore;
  tUInt8 DEF_CAN_FIRE_RL_bram_serverAdapter_outData_setFirstCore;
  tUInt8 DEF_CAN_FIRE_init_done;
  tUInt8 DEF_CAN_FIRE_init_request_put;
  tUInt8 DEF_bram_serverAdapter_cnt_6_SLT_3___d73;
  tUInt8 DEF_b__h907;
  tUInt8 DEF_bram_serverAdapter_s1___d85;
  tUInt8 DEF_memInit_initialized__h1870;
  tUInt8 DEF_bram_serverAdapter_cnt_3_whas____d82;
  tUInt8 DEF_bram_serverAdapter_cnt_2_whas____d78;
  tUInt8 DEF_bram_serverAdapter_cnt_1_whas____d77;
  tUInt8 DEF_bram_serverAdapter_outData_enqData_whas____d75;
  tUInt8 DEF_bram_serverAdapter_outDataCore_notEmpty____d74;
  tUInt8 DEF_bram_serverAdapter_s1_0_BIT_0___d87;
 
 /* Local definitions */
 private:
  tUInt32 DEF_x__h517;
 
 /* Rules */
 public:
  void RL_bram_serverAdapter_outData_setFirstCore();
  void RL_bram_serverAdapter_outData_setFirstEnq();
  void RL_bram_serverAdapter_outData_enqOnly();
  void RL_bram_serverAdapter_outData_deqOnly();
  void RL_bram_serverAdapter_outData_enqAndDeq();
  void RL_bram_serverAdapter_cnt_finalAdd();
  void RL_bram_serverAdapter_s1__dreg_update();
  void RL_bram_serverAdapter_stageReadResponseAlways();
  void RL_bram_serverAdapter_moveToOutFIFO();
  void RL_bram_serverAdapter_overRun();
 
 /* Methods */
 public:
  void METH_request_put(tUInt64 ARG_request_put);
  tUInt8 METH_RDY_request_put();
  tUInt32 METH_response_get();
  tUInt8 METH_RDY_response_get();
  void METH_init_request_put(tUInt64 ARG_init_request_put);
  tUInt8 METH_RDY_init_request_put();
  tUInt8 METH_init_done();
  tUInt8 METH_RDY_init_done();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMemory &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkMemory &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkMemory &backing);
};

#endif /* ifndef __mkMemory_h__ */
